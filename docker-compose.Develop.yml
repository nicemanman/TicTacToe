services:
  ui:
    image: tic-tac-toe-ui
    ports:
      - '80:8080'
    networks:
      - tictactoe-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    build:
      context: .
      dockerfile: UserInterface/Dockerfile
      
  server:
    image: tic-tac-toe-server
    ports:
      - '5000:8080'
    hostname: server
    depends_on: 
      message-queue:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - tictactoe-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    build:
      context: .
      dockerfile: Server/Dockerfile

  db:
    image: postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - tictactoe-network
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 3s
      retries: 30
    volumes:
      - db:/var/lib/postgresql/data
      
  message-queue:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASSWORD=guest
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - tictactoe-network
    volumes:
      - rabbit-data:/var/lib/rabbitmq/
      - rabbit-log:/var/log/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
      
  caddy:
    image: caddy:latest
    ports:
      - "80:80"
      - "443:443"
    command: caddy reverse-proxy --from http://tictactoe.cloud --to 127.0.0.1:80
    volumes:
      - caddy_data:/data
      - caddy_config:/config    
  
volumes:
  db:
  rabbit-data:
  rabbit-log:
  caddy_data:
  caddy_config:
    
networks:
  tictactoe-network:
